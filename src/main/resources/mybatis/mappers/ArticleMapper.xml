<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.blog.repository.mybatis.mapper.article.ArticleMapper">
    <insert id="createArticle">
        insert into
        articles (articleId, authorId, slug, title, description, body, createdAt, updatedAt)
            value (
        #{article.id},
        #{article.authorId},
        #{article.slug},
        #{article.title},
        #{article.description},
        #{article.body},
        #{article.createdAt},
        #{article.updatedAt}
        )
    </insert>

    <update id="updateArticle">
        update articles
        set title       = #{article.title},
            slug        = #{article.slug},
            description = #{article.description},
            body        = #{article.body}
        where articleId = #{id};
    </update>

    <delete id="deleteArticle">
        delete
        from articles
        where slug = #{slug};
    </delete>

    <select id="findByQuery" resultType="String">
        select distinct A.articleId
        from articles A
            left join article_tag AT on A.articleId = AT.articleId
            left join tags T on T.tagId = AT.tagId
            left join articlefavorites AF on AF.articleId = AT.articleId
            left join users AU on AU.id = A.authorId
            left join users FU on FU.id = AF.userId
        <where>
            <if test="tag != null">T.name = #{tag};</if>
            <if test="author != null"> AU.username = #{author}</if>
            <if test="favorited != null"> FU.username = #{favorited}</if>
        </where>
        order by A.createdAt desc
        limit #{limit} offset #{offset}
    </select>

    <select id="getUserFeed" resultType="String">
        select follow_id
        from follows
        where user_id = #{userId}
        limit #{limit} offset #{offset}
    </select>

    <select id="findBySlug" resultMap="article">
        select authorId,
               articleId,
               slug,
               title,
               description,
               body,
               createdAt,
               updatedAt
        from articles
        where slug = #{slug};
    </select>

    <select id="isFollowingArticle" resultType="java.lang.Boolean">
        select case
                   when exists(
                           select *
                           from articlefavorites
                           where userId = #{userId}
                             and articleId = #{articleId})
                       then 1
                   else 0 end;

    </select>

    <select id="countArticleFavorites" resultType="java.lang.Integer">
        select count(*)
        from articlefavorites
        where articleId = #{articleId};
    </select>

    <select id="findTagList" resultType="String">
        select tags.name
        from article_tag
                 left join tags on article_tag.tagId = tags.tagId
        where articleId = #{articleId}
    </select>

    <select id="findByTag" resultType="String">
        select tagId
        from tags
        where name = #{name};
    </select>

    <insert id="saveTag" keyProperty="tagId">
        insert into tags (tagId, name)
        value (
        #{tag.id},
        #{tag.name}
        )
    </insert>

    <insert id="saveArticleTag">
        insert into
        article_tag (articleId, tagId)
        value (
        #{articleId},
        #{tagId}
        )
    </insert>

    <select id="findById" resultMap="article">
        select authorId,
               articleId,
               slug,
               title,
               description,
               body,
               createdAt,
               updatedAt
        from articles
        where articleId = #{articleId};
    </select>

    <resultMap id="article" type="com.example.blog.domain.article.Article">
        <result property="authorId" column="authorId"/>
        <result property="id" column="articleId"/>
        <result property="slug" column="slug"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="body" column="body"/>
        <result property="createdAt" column="createdAt"/>
        <result property="updatedAt" column="updatedAt"/>
    </resultMap>
</mapper>